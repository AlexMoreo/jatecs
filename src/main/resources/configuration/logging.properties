#
# This file is part of JaTeCS.
#
# JaTeCS is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# JaTeCS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with JaTeCS.  If not, see <http://www.gnu.org/licenses/>.
#
# The software has been mainly developed by (in alphabetical order):
# - Andrea Esuli (andrea.esuli@isti.cnr.it)
# - Tiziano Fagni (tiziano.fagni@isti.cnr.it)
# - Alejandro Moreo Fernández (alejandro.moreo@isti.cnr.it)
# Other past contributors were:
# - Giacomo Berardi (giacomo.berardi@isti.cnr.it)
#

# Properties file which configures the operation of the JDK
# logging facility.

# The system will look for this config file, first using
# a System property specified at startup:
#
# >java -Djava.util.logging.config.file=myLoggingConfigFilePath
#
# If this property is not specified, then the config file is
# retrieved from its default location at:
#
# JDK_HOME/jre/lib/logging.properties

# Global logging properties.
# ------------------------------------------
# The set of handlers to be loaded upon startup.
# Comma-separated list of class names.
# (? LogManager docs say no comma here, but JDK example has comma.)
handlers=java.util.logging.ConsoleHandler
#handlers=java.util.logging.FileHandler

# Default global logging level.
# Loggers and Handlers may override this level
.level=ALL

# Default formatter to use
.formatter=java.util.logging.SimpleFormatter

# Loggers
# ------------------------------------------
# Loggers are usually attached to packages.
# Here, the level for each package is specified.
# The global level is used by default, so levels
# specified here simply act as an override.
#
# For example:
#it.cnr.jatecs.level=ALL
#myapp.business.level=CONFIG
#myapp.data.level=SEVERE
#
# For debugging purposes:
#.level=ALL


# Handlers
# -----------------------------------------

# --- ConsoleHandler ---
# Override of global logging level
java.util.logging.ConsoleHandler.level=ALL
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter

# --- FileHandler ---
# Override of global logging level
java.util.logging.FileHandler.level=INFO

# Naming style for the output file:
# (The output file is placed in the directory
# defined by the "user.home" System property.)
java.util.logging.FileHandler.pattern=%h/java%u.log

# Limiting size of output file in bytes:
java.util.logging.FileHandler.limit=50000

# Number of output files to cycle through, by appending an
# integer to the base file name:
java.util.logging.FileHandler.count=1

# Style of output (Simple or XML):
java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter

# Set the default logging level for the logger named com.mycompany
it.cnr.jatecs = INFO